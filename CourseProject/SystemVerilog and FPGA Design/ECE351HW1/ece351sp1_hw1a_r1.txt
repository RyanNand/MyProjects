/*****
 * ECE 351 Homework #1 - Question 1 (60 pts)
 *
 * True/False, multiple choice, and short answer
 */

===============================================================================
Part 1.	(2 pts/ea) True/False

Answer True or False for the following questions:

1. SystemVerilog supports Object Oriented programming

TRUE or FALSE __true__

2. "buf" and "notif0" are gate level primitives in SystemVerilog

TRUE or FALSE __true__

3. A primitive gate instance name must be provided when creating an instance of a SystemVerilog primitive gate ((and, or, ...)

TRUE or FALSE __false__

4. When creating an instance of a SystemVerilog primitive gate type the output is listed after all of the inputs in the gate description
   
TRUE or FALSE __false__

5. A value of 'z' on an input or an output in SystemVerilog means that the simulator cannot determine whether the value is a 0 or a 1
   
TRUE or FALSE __false__

6. Per Roy's definition a SoC contains at least one embedded CPU running an application interfaced to one or more vendor-supplied, 3rd party or custom IP blocks.

TRUE or FALSE __true__

7. $monitor() will display the current values of all the variables in its argument list whenever the value of any of the variables changes values.

TRUE or FALSE __true__

8. An assignment of 'x or 'z cannot be made to a variable in SystemVerilog

TRUE or FALSE __false__

9. You may use the .* shorthand notation only when all of the variable names match all of the port names in an instantiation of a module

TRUE or FALSE __false__

10. The following Verilog code is valid:
     wire [7:0] a, b;
     wire [0:15] sum = a + b

TRUE or FALSE __false__

11. The default type for an enum is int.
 
TRUE or FALSE __true__

12. The following Verilog code snippet will result in an 8-bit tri-state buffer:
     wire [7:0] data_out, data_in;
     wire en;
     assign data_out = en ? data_in : 1’bz;

TRUE or FALSE __true__

13. Assigning a 4-state variable to a 2-state variable in a simulation results causes an error message to be displayed on the console

TRUE or FALSE __false__

14. x = ^8’b11100011 will be equal to 1 if it is simulated in SystemVerilog

TRUE or FALSE __true__

15. localparams in a module can be overridden when the module is instantiated

TRUE or FALSE __false__

===============================================================================
Part b.	(3 pts/ea) Short answer

1. What are a few  similarities and differences between a SystemVerilog int and a SystemVerilog integer data type?

YOUR ANSWER: The similarities are both data types are for variables and they both have a 32-bit size vector.
A few differences are that int is a 2-state variable and an interger data type is a 4-state variable. 
Synthesis compilers treat int as a integer data type.

2. Why do we need to be cautious when we assign a 4-state variable to a 2-state variable?

YOUR ANSWER: Because there will be silent conversions. For example, a 4-state variable driving an 'x' will be silently converted to a '0'.
This result could be unintentional and undesired.

3. Answer these questions about Synthesis?  Keep your answers consice (2 or 3 sentences for each question):

    i. What is Synthesis?

YOUR ANSWER: Synthesis is a stage in the design flow for both ASICs and FPGAs where the HDL is mapped to a specific ASIC or FPGA technology.
Typically, this is done with software known as systhesis compilers where it optimizes the HDL to the specific ASIC or FPGA technology being used.

    ii. What information would you be likely to include in a constraints file?

YOUR ANSWER: The constraints file is meant for timing, size, power, and other design constraints that are needed for a specific engineering project.
For example, there could be desired propagation delays, desired transistor sizes, and desired power dissipations.

    iii. Even though you can write RTL code to be largely technology dependent, Synthesis ties your code more closely to a specific target technology.  Why is this?
    
YOUR ANSWER: Synthesis compilers are significantly better at optimizing HDL to specific target technology than humans are.
If humans were to write RTL based on a specific technology the overall production time would increase. 
For example, risk of human error increases which could increase debug time.

4. Define the follow terms.  Keep your definitions for each term to a few sentences:

    i. Module 

YOUR ANSWER: The basic building block for Verilog/SV. Each module has a definition that performs some part of a design. 
	Typically, a project has multiple modules from multiple files (one module per file promotes readability of the project).

    ii. Instance of a module
    
YOUR ANSWER: This is taking the module (typically created in another file) and actually utilizing it in the design. 
	In other words, there must be an instance of the module for the module to be used. 

    iii. Port
    
YOUR ANSWER: If a module were to be seen as a block in a block diagram. A port is the inputs or the outputs to that block. 
	In other words, the module uses ports to communicate with the environment. 

5. Explain the difference between the data types logic, reg, and wire 
    
YOUR ANSWER: Wire is a net type, whereas the other two are variable data types. A reg is an obsolete 4-state general purpose varible data type with user-defined vector size.
	A logic data type replaces reg because it's the same thing. The only difference between logic and reg is that logic infers a wire type when used in module ports as input/inout.


===============================================================================
Part c.	Multiple choice

1. (Circle the best answer, no partial credit) The following SystemVerilog code snippet

logic [3:0] a = 4'hFF;
initial begin
     $display("%d", a);
     a = '1;
    $display("%d", a);
end

displays the following:

    a.  15
        1       
    b.  15
        15       
    c.  255
        1      
    d.  255
        255        
    e. None of the above
    
YOUR ANSWER: b
    
2. (Circle the best answer: no partial credit) In the statement assign r = |6’b0x1x01, 
    what is the value of r after execution?
    
    a.  r = 6’b0x1x01
    b.  r = 1’b1
    c.  r = 6’b0
    d.  r = 1’bx
    e.  r = 6’bxxxxxx
    
YOUR ANSWER: b

3. (Circle the best answer) The following SystemVerilog code snippet
    logic [7:0] b1 = 8'b1101zzzz;
    byte b2;
    b2 = b1;
    $write(“b1=%b, ”,b1);
    $display(“b2=%h”,b2);
will display:
    
    a. b1  11-1xxxx, b2 = d0
    b. b1 = 8'b1101zzzz, b2 = dz
    c. b1 = 1101zzzz, b2 = xx
    d. b1 = 1101zzzz, b2=d0
    e. None of the above
     
YOUR ANSWER: d

4. (Circle all of the items that are true, score is right - wrong) What is the difference between
       bit[7:0] sig_1;
       byte sig_2;

    a. both sig_1 and sig_2 are 8-bit 2-state variables
    b. both sig_1 and sig_2 are treated as signed numbers
    c. sig_1 is treated as a signed number but sig_2 is treated as unsigned
    d. sig_1 and sig_2 have a different number of bits
    e. bit[7:0] is synthesizable but byte is not synthesizable
     
YOUR ANSWER: a

5. (Circle all of the items that are true, score is right - wrong) The following can be said about port 
    declarations in a module:
    
    a. Both input and output ports can be of type wire or logic
    b. The following port list is valid:
        module alu (a, b, result);

    c. The default size of reg, logic, bit, and wire is 1 bit wide
    d. The port type and data type can be a variable or any of the net types and data types
    e. The default type when no data type is specified is logic
   
YOUR ANSWER: a, b, c **(Aparently all true)**